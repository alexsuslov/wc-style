// Generated by CoffeeScript 1.8.0
(function() {
  var TaskBar, WC;

  WC = window.WC || {};

  TaskBar = (function() {
    TaskBar.prototype.name = 'wcPanel';

    TaskBar.prototype.version = '0.0.1';

    function TaskBar(opt, el) {
      this.opt = opt;
      this.el = el;
      if (this.el) {
        this.$el = $(el);
      }
      this.id = this.$el.attr('id');
      this.parseCss(this.opt.style.val("#" + this.id));
      window[this.id] = this;
      this;
    }

    TaskBar.prototype.parseCss = function(str) {
      var place, size;
      if (!str) {
        return this;
      }
      if (!this.data) {
        this.data = {};
      }
      size = [0, 0];
      place = [0, 0];
      str.replace(/^\{/, '').replace(/\}$/, '').split(';').forEach((function(_this) {
        return function(value) {
          var name, val;
          value = value.split(':');
          name = $.trim(value[0]);
          val = $.trim(value[1]);
          if (name) {
            return _this.data[name] = val;
          }
        };
      })(this));
      return this;
    };

    TaskBar.prototype.updateStyle = function() {
      var css, name;
      css = {};
      for (name in this.data) {
        switch (name) {
          case 'place':
            css.left = this.data.place[0] + 'px';
            css.top = this.data.place[1] + 'px';
            break;
          case 'size':
            css.width = this.data.size[0] + 'px';
            css.height = this.data.size[1] + 'px';
            break;
          default:
            css[name] = this.data[name];
        }
      }
      this.opt.style.val('#' + this.id, css);
      return this;
    };

    TaskBar.prototype.add = function(window) {
      if (!this.windows) {
        this.windows = [];
      }
      this.windows.push(window);
      this.render();
      return this;
    };

    TaskBar.prototype.render = function() {
      var $ul, items;
      $ul = $('<ul></ul>');
      items = [];
      this.windows.forEach((function(_this) {
        return function(wnd) {
          var btn, cls;
          cls = '';
          btn = $("<li> <button type='button' class='" + cls + "'>" + wnd.name + "</button> </li>");
          _this.event(btn, wnd);
          return items.push(btn);
        };
      })(this));
      return this.el.html($ul.html(items));
    };

    TaskBar.prototype.val = function(name, val) {
      if (val) {
        this.data[name] = val;
        return this.updateStyle();
      } else {
        return this.data[name];
      }
    };

    TaskBar.prototype.event = function($btn, wnd) {
      $btn.on('click', function(e) {
        return wnd.$el.show();
      });
      return this;
    };

    return TaskBar;

  })();

  WC.TaskBar = TaskBar;

  window.WC = WC;

  $(function() {
    var w;
    w = window.innerWidth;
    WC.style.val({
      "#taskbar": "{ border: 2px outset #d0d0d0; width: " + (w - 4) + "px; height: 64; background-color: #eaeaea; position: absolute; bottom:0; left: 0; }",
      "#taskbar ul li": "{ list-style: none; display: inline-block; margin-left: 8px; }",
      "#taskbar ul li button": "{ display: inline-block; margin-bottom: 0; font-weight: normal; text-align: center; vertical-align: middle; -ms-touch-action: manipulation; touch-action: manipulation; cursor: pointer; background-image: none; border: 1px solid transparent; white-space: nowrap; padding: 8px 12px; font-size: 16px; line-height: 1.42857143; border-radius: 4px; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; }"
    });
    return $.fn.taskbar = function(options) {
      options = options || {};
      options.style = WC.style;
      return WC.taskbar = new TaskBar(options, this);
    };
  });

}).call(this);

//# sourceMappingURL=wc-panel.js.map
